name: CNI Validator

on:
  pull_request:
    paths:
      - .github/workflows/cni_validator.yml
      - Cargo.lock
      - Cargo.toml
      - charts/linkerd-cni/**
      - deny.toml
      - cni-plugin/linkerd-cni-validator/**
      - rust-toolchain

permissions:
  contents: read

env:
  CARGO_ACTION_FMT_VERSION: v0.1.3
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  K3D_VERSION: v5.4.1
  PROTOC_NO_VENDOR: 1
  PROXY_INIT_VERSION: v1.5.3
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10


jobs:
  fmt:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.60.0
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: rustup component add rustfmt
      - run: cargo fmt -p linkerd-cni-validator -- --check

  audit:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing Ci.
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
    - uses: EmbarkStudios/cargo-deny-action@ccfac4e084d1dedad50125be4550f87a21ba181e
      with:
        command: check ${{ matrix.checks }}

  clippy:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.60.0
    steps:
      - run: rustup component add clippy
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: |
          bin/scurl -o /usr/local/bin/cargo-action-fmt "https://github.com/olix0r/cargo-action-fmt/releases/download/release%2F${CARGO_ACTION_FMT_VERSION}/cargo-action-fmt-x86_64-unknown-linux-gnu"
          chmod 755 /usr/local/bin/cargo-action-fmt
      - run: cargo fetch --locked
      - name: Run cargo clippy
        run: cargo clippy --frozen -p linkerd-cni-validator --no-deps --message-format=json | cargo-action-fmt

  check:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.60.0
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: |
          bin/scurl -o /usr/local/bin/cargo-action-fmt "https://github.com/olix0r/cargo-action-fmt/releases/download/release%2F${CARGO_ACTION_FMT_VERSION}/cargo-action-fmt-x86_64-unknown-linux-gnu"
          chmod 755 /usr/local/bin/cargo-action-fmt
      - run: cargo fetch --locked
      # Check each crate independently to ensure its Cargo.toml is sufficient.
      - run: |
          toml="${PWD}/cni-plugin/linkerd-cni-validator/Cargo.toml"
          d=$(dirname "$toml")
          echo "# $d"
          (cd $d ; cargo check --all-targets --frozen --message-format=json | cargo-action-fmt)

  rust-toolchain:
    name: rust toolchain
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: |
          ex=0

          # Check this workflow against the version in rust-toolchain.
          versions=$(sed -nE 's|.*docker://(.*/)?rust:([^ #]+).*|\2|p' .github/workflows/policy_controller.yml)
          for mismatch in $(echo "$versions" | grep -vF "$(cat rust-toolchain)" || true) ; do
            echo "::error file=.github/workflows/policy_controller.yml::Workflow uses incorrect rust version(s): $mismatch"
            ex=$((ex + 1))
          done

          # Check the policy-controller dockerfiles workflow against the version
          # in rust-toolchain.
          for f in policy-controller/*.dockerfile ; do
            versions=$(sed -nE 's|ARG RUST_IMAGE=(.*/)?rust:([^ #]+).*|\2|p' "$f")
            for mismatch in $(echo "$versions" | grep -vF "$(cat rust-toolchain)" || true) ; do
              echo "::error file=\"$f\"::$f uses incorrect rust version(s): $mismatch"
              ex=$((ex + 1))
            done
          done

          exit $ex
